opt_out_usage

# Global variables to simplify the individual adjustment
PROJECT_NAME = "HPLife"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"
BUILD_FOR_DEVELOPMENT_ONLY = true # true = Build for Development | false = Build to create a release
BUILD_ONLY = false

APP_ID_ANDROID = "1:806665594130:android:d517b5acb0f086ddb9ffcb"
APP_ID_IOS = "1:806665594130:ios:5bb57f50527d3912b9ffcb"

APP_IDENTIFIER = "com.hp.life"
APPLE_TEAM_ID = "6HB5Y2QTA3"
APPLE_APP_ID = "com.hp.life"

########################################################################
# retrieve the proper key to use
########################################################################
private_lane :certificates do | options |
    match_type = options[:match_type]

    if options[:ci]
      create_keychain(
        name: ENV["CI_KEYCHAIN_NAME"],
        password: ENV["CI_KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
      match(
        type: match_type,
        keychain_name: ENV["CI_KEYCHAIN_NAME"],
        keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    else
      match(
        type: match_type,
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    end

  end

########################################################################
#  build IOS IPA
########################################################################
private_lane :buildIOS do | options |
    build_for_development_only = options[:build_for_development_only]
    configuration_name = build_for_development_only ? "Development" : "Release"
    export_options_method = build_for_development_only ? "development" : "app-store"
    match_type = build_for_development_only ? "development" : "appstore"

    certificates(
      ci: options[:running_on_ci],
      match_type: match_type,
    )

    cocoapods(
      repo_update: true,
      podfile: "./ios/Podfile"
    )

    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      silent: true,
      clean: true,
      configuration: configuration_name,
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_options: {
        method: export_options_method,
        provisioningProfiles: {
            options[:app_identifier] => ENV["sigh_#{options[:app_identifier]}_#{match_type}_profile-name"],
        }
      },
    )
  end


########################################################################
#  clean and build android APK
########################################################################
private_lane :buildAndroid do | options |
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')

  end

########################################################################
#  upload file to fastlane and assign the tester group
########################################################################
private_lane :firebase do | options |

    firebase_app_distribution(
      app: APP_ID_IOS,
      groups: "scott-read-mobile",
      release_notes: options[:message],
      firebase_cli_path: "/usr/local/bin/firebase",
      #firebase_cli_token: FIREBASE_CI_LOGIN,
    )

    firebase_app_distribution(
      apk_path: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      app: APP_ID_ANDROID,
      groups: "scott-read-mobile",
      release_notes: options[:message],
      firebase_cli_path: "/usr/local/bin/firebase",
      #firebase_cli_token: FIREBASE_CI_LOGIN,
    )

end

########################################################################
#  PUBLIC. increase the build number. use xcode as the master
########################################################################
lane :bumpVersion do | options |

    increment_build_number(
      xcodeproj: XCODE_PROJECT,
    )

    #increment_version_number(
    #  xcodeproj: XCODE_PROJECT,
    #  bump_type: "minor"
    #)

    version = get_version_number(
      xcodeproj: XCODE_PROJECT,
      target: PROJECT_NAME
    )

    build_number = get_build_number(
      xcodeproj: XCODE_PROJECT,
    )

    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
    )

    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: version
    )
  end

########################################################################
#  PUBLIC. build ios/android build and push to firebase.
########################################################################
lane :buildNoBumpFirebase do
  running_on_ci = ENV["CI"] || false

  #need to get the last commit before pushing the changes
  commit = last_git_commit
  commit_message = commit[:message]

  current_version = get_version_number(
      xcodeproj: XCODE_PROJECT,
      target: PROJECT_NAME
  )

  options = {
      :build_for_development_only => BUILD_FOR_DEVELOPMENT_ONLY,
      :running_on_ci => running_on_ci,
      :git_branch_name => running_on_ci ? "#{ENV['GIT_BRANCH_NAME']}"  : sh("git", "rev-parse", "--abbrev-ref", "HEAD", log: false),
      :app_identifier => APP_IDENTIFIER,
      :apple_id => ENV["APPLE_ID"],
      :apple_team_id => APPLE_TEAM_ID,
      :apple_app_id => APPLE_APP_ID,
      :version => current_version
  }

  buildIOS(options)
  buildAndroid(options)

  firebase(
      :message => commit_message
  )
end

########################################################################
#  PUBLIC. Just build the IPA for IOS
########################################################################
lane :buildIOSOnly do
    running_on_ci = ENV["CI"] || false


    build_for_development_only = true
    configuration_name = build_for_development_only ? "Development" : "Release"
    export_options_method = build_for_development_only ? "development" : "app-store"
    match_type = build_for_development_only ? "development" : "appstore"

    cocoapods(
      repo_update: true,
      podfile: "./ios/Podfile"
    )

    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      silent: true,
      clean: true,
      configuration: configuration_name,
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_method: export_options_method,
      export_options: {
        provisioningProfiles: {
          "com.hp.life" => "HP Life Development Provision",
      }
      },
    )

  end

########################################################################
#  clean and build android APK
########################################################################
lane :buildAndroidOnly do | options |
  gradle(task: 'clean', project_dir: 'android/')
  gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
end
